// <auto-generated />
using System;
using HastaBilgiSistemi.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HastaBilgiSistemi.Data.Migrations
{
    [DbContext(typeof(HBSContexts))]
    [Migration("20210527203722_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("t_appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2021, 5, 27, 23, 37, 21, 653, DateTimeKind.Local).AddTicks(2563),
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 653, DateTimeKind.Local).AddTicks(5027),
                            DoctorId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 653, DateTimeKind.Local).AddTicks(5570),
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Diagnostic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("t_diagnostics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 720, DateTimeKind.Local).AddTicks(4684),
                            Detail = "Kol Burkulması",
                            DoctorId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 720, DateTimeKind.Local).AddTicks(4699),
                            Name = "Eklem Burkulması",
                            PatientId = 1
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PoliclinicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PoliclinicId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("t_doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 717, DateTimeKind.Local).AddTicks(1258),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 717, DateTimeKind.Local).AddTicks(1272),
                            PoliclinicId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(360)
                        .HasColumnType("nvarchar(360)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Id");

                    b.ToTable("t_hospital");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bafra/Samsun",
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 662, DateTimeKind.Local).AddTicks(9025),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 662, DateTimeKind.Local).AddTicks(9038),
                            Name = "Bafra Devlet Hastanesi"
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATCName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Prospectus")
                        .IsRequired()
                        .HasMaxLength(540)
                        .HasColumnType("nvarchar(540)");

                    b.HasKey("Id");

                    b.ToTable("t_medicines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ATCName = "candesartan, amlodipine and hydrochlorothiazide",
                            Company = "DEVA HOLDİNG A.Ş.",
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(3989),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(4004),
                            Name = "CANLOX PLUS",
                            Prospectus = "CANLOX PLUS 16 MG/10 MG/12,5 MG TABLET (28 TABLET)"
                        },
                        new
                        {
                            Id = 2,
                            ATCName = "isoconazole",
                            Company = "ABDİ İBRAHİM",
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(4019),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(4020),
                            Name = "TRAVOGEN",
                            Prospectus = "TRAVOGEN %1 KREM (30 G)"
                        },
                        new
                        {
                            Id = 3,
                            ATCName = "ondansetron",
                            Company = "NOBEL İLAÇ SAN. VE TİC. A.Ş.",
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(4024),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 722, DateTimeKind.Local).AddTicks(4025),
                            Name = "ZOLTEM",
                            Prospectus = "ZOLTEM 4 MG 6 FILM TABLET"
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Height")
                        .HasColumnType("TINYINT");

                    b.Property<long>("IdentityNumber")
                        .HasMaxLength(11)
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("Weight")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("t_patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bafra/Samsun",
                            BirthDay = new DateTime(2021, 5, 27, 23, 37, 21, 715, DateTimeKind.Local).AddTicks(6150),
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 715, DateTimeKind.Local).AddTicks(7780),
                            Height = (byte)170,
                            IdentityNumber = 35648954110L,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 715, DateTimeKind.Local).AddTicks(7795),
                            UserId = 3,
                            Weight = (short)80
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Polyclinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("t_polyclinics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 660, DateTimeKind.Local).AddTicks(7455),
                            HospitalId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2021, 5, 27, 23, 37, 21, 660, DateTimeKind.Local).AddTicks(7472),
                            Name = "K.B.B Polikliniği"
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosticId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticId");

                    b.HasIndex("MedicineId");

                    b.ToTable("t_recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 724, DateTimeKind.Local).AddTicks(2353),
                            DiagnosticId = 1,
                            IsDeleted = false,
                            MedicineId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 724, DateTimeKind.Local).AddTicks(3261),
                            DiagnosticId = 1,
                            IsDeleted = false,
                            MedicineId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 5, 27, 23, 37, 21, 724, DateTimeKind.Local).AddTicks(3266),
                            DiagnosticId = 1,
                            IsDeleted = false,
                            MedicineId = 3
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("t_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "5a1a2a8a-a6f6-46f2-b63c-965c2b53349d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "abe09f93-a98f-4373-82c0-9ff3aadc6e0b",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "6d4ea9e6-94a0-4e45-887c-716945622e59",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("t_role_claims");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("t_users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "950160cd-7392-4404-9647-0459770550ab",
                            Email = "admin@hbs.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HBS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMEcuqbbgUJ8nQbeId9dcRq9ZTIxhaEB7iCamZyqNQHQCiIbC0FKUV3tHMu5TwWoYg==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "e0c2ca5e-2dfa-4de9-a104-2bec9ea5b1a3",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3f519e6-67fe-4f3d-980b-b9e3d653f8c3",
                            Email = "doctor@hbs.com",
                            EmailConfirmed = true,
                            FirstName = "İlayda",
                            LastName = "Özcan",
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HBS.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxF1Gb85IiB3/8MCz31BbWvUIWgepbb2+xTlGNJiDTK44LGNiNCwDxKrrDEYI4+og==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "a23cdec7-26ba-4867-9af9-7e2822f49166",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b2fab48-f1fa-4f14-bb1f-68b0baabe1b6",
                            Email = "patient@hbs.com",
                            EmailConfirmed = true,
                            FirstName = "İbrahim",
                            LastName = "Dursun",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HBS.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEPyqbKagrEIc7Wg/2vXLl4ot7wn2kx82bLE0ug4OpS+s7ZQatr0nCKXI1/Ux1zZGNw==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "defaultUser.png",
                            SecurityStamp = "e506e6ae-00e5-44fc-a05f-dd6052df42ac",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("t_user_claims");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("t_user_logins");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("t_user_roles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("t_user_tokens");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Diagnostic", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Appointment", "Appointment")
                        .WithMany("Diagnostics")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Diagnostics")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Patient", "Patient")
                        .WithMany("Diagnostics")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Doctor", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Polyclinic", "Policlinic")
                        .WithMany("Doctors")
                        .HasForeignKey("PoliclinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("HastaBilgiSistemi.Entities.Concrete.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policlinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Patient", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("HastaBilgiSistemi.Entities.Concrete.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Polyclinic", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Hospital", "Hospital")
                        .WithMany("Policlinics")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Recipe", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Diagnostic", "Diagnostic")
                        .WithMany("Recipes")
                        .HasForeignKey("DiagnosticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Medicine", "Medicine")
                        .WithMany("Recipes")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostic");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("HastaBilgiSistemi.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Appointment", b =>
                {
                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Diagnostic", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Hospital", b =>
                {
                    b.Navigation("Policlinics");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Medicine", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Diagnostics");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.Polyclinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HastaBilgiSistemi.Entities.Concrete.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
